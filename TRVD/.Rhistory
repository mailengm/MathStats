plot(z_1, col = '#EE3496', pch=16)
points(z_2, col = '#004D40', pch=16)
#Ejercicio 9)
# Vamos a hacer las cuentas en R para comprobar las propiedades que sugiere
#el ejercicio teórico
install.packages('expm')
library(expm)
#Definimos las matrices, vectores y magnitudes del problema
sigma_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
pi_1 = 3/4
pi_2 = 1/4
mu_x = pi_1*mu_1 + pi_2*mu_2
sigma_b = pi_1*((mu_1 - mu_x) %*% t(mu_1 - mu_x)) + pi_2*((mu_2 - mu_x) %*% t(mu_2 - mu_x))
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
C = sqrtm(sigma_w)
#compruebo:
t(C) %*% C
#me da igual que sigma_w!
#calculo los autovalores y autovectores de B C^(-1) simga_b C que me define la
#magnitud F que quiero maximizar y adopta los valores maximos en sus autovectores:
B = t(solve(C)) %*% sigma_b %*% solve(C)
#calculo ave y ava:
b = eigen(B)
#a continuación defino la matriz A que esta compuesta por los alpha definidos
#como C^(-1)*beta_j con beta_j autovector de B:
A_aux = b$vectors
A = solve(C) %*% A_aux
A
#calculo las cordenadas de los centroides según definicion:
#centroides
v_1 = t(A)%*%mu_1
v_2 = t(A)%*%mu_2
#la ditancia euclidea entre los centroides transformados al espacio de coordenadas
#discriminantes está dado por la norma 2 euclidea:
#distancia euclidea
norm(v_1 - v_2, "2")
#comparo esta magnitud con la distancia de los centroides en el espacio
#original pero calculada con la métrica definida por las covarianzas
#de las variables aleatorias originales:
#distancia mahalanobis
sqrt(t(mu_1-mu_2)%*%solve(sigma_w)%*%(mu_1 - mu_2))
#me da exactamente lo mismo!!
#realizo las simulaciones para probar la version estimada de lo hecho arriba:
## simulación:
library(MASS)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
pi_1 = 3/4
pi_2 = 1/4
mu_x = pi_1*mu_1 + pi_2*mu_2
n_1 = rbinom(1,500,3/4)
n_2 = 500 - n_1
x_group_1 = mvrnorm(n_1, mu = mu_1, Sigma = sigma_w)
x_group_2 = mvrnorm(n_2, mu = mu_2, Sigma = sigma_w)
plot(x_group_1, col = 'red')
points(x_group_2, col = 'green')
x_1_cent = sweep(x_group_1,2,mu_x)
x_2_cent = sweep(x_group_2,2,mu_x)
z_1 =t( t(A)%*%t(x_1_cent)) #el quilombo de transpuestas es culpa de R
z_2 =t( t(A)%*%t(x_2_cent)) #el quilombo de transpuestas es culpa de R
plot(z_1, col = 'red')
points(z_2, col = 'green')
#se observa que la varianza esta "alineada" horizontalmente. Esto ocurre porque
#el segundo autovalor es 0, indicándonos que toda la varianza se explica a partir
#de la primer coordenada discriminante
library(MASS)
library(ggplot2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
mu = c(5/8, 5/8)
mu_1_ <- mu_1 - mu
mu_2_ <- mu_2 - mu
S_b <- fractions(3/4 * (mu_1_%*%t(mu_1_))) + fractions(1/4 * (mu_2_%*%t(mu_2_)))
S_b
S_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
S_b = matrix(c(-27/64,-9/64,-9/64,3/64),ncol = 2, nrow = 2)
S_aux<-solve(S_w)%*%S_b
fractions(S_aux)
A<-eigen(S_aux)$vectors
fractions(A)
t(A)%*%S_w%*%A
t(A)%*%S_b%*%A
Sx <- S_w+S_b
t(A)%*%Sx%*%A
# Load necessary libraries
library(ggplot2)
library(mvtnorm)
# Set your parameters (make sure you've defined mu_1, mu_2, and S_w)
mu_1 <- c(1, 2)  # Example mean vector for x_1
mu_2 <- c(3, 4)  # Example mean vector for x_2
S_w <- matrix(c(1, 0.5, 0.5, 2), nrow = 2)  # Example covariance matrix
# Generate random data
set.seed(3487)  # for reproducibility
n_1 <- rbinom(1, 500, 3/4)
n_2 <- 500 - n_1
x_1 <- mvrnorm(n_1, mu = mu_1, Sigma = S_w)
x_2 <- mvrnorm(n_2, mu = mu_2, Sigma = S_w)
# Combine the data into a data frame
data <- data.frame(
x = c(x_1[, 1], x_2[, 1]),
y = c(x_1[, 2], x_2[, 2]),
group = factor(rep(c("G=1", "G=2"), c(n_1, n_2)))
)
# Create the scatterplot using ggplot2
scatter_plot<-ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
labs(x = "X1", y = "X2", title = "Dispersión de las variables originales") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))  # Customize colors if needed
# Save the plot to a PDF file
ggsave("scatter_plot.pdf", plot = scatter_plot, width = 8, height = 3)
x_1_ <- sweep(x_1, 2, mu)
x_2_ <- sweep(x_2, 2, mu)
z_1 <- t(t(A)%*%t(x_1_))
z_2 <- t(t(A)%*%t(x_2_))
plot(z_1, col = '#EE3496', pch=16)
points(z_2, col = '#004D40', pch=16)
z_1 <- t(t(A)%*%t(x_1_))
z_2 <- t(t(A)%*%t(x_2_))
zz <- rbind(z_1, z_2)
zz
data <- data.frame(
x = zz[,1],
y = zz[,2],
group = factor(rep(c("G=1", "G=2"), c(length(z_1), length(z_2))))
)
data
View(data)
trans_plot<-ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
labs(x = "x", y = "y", title = "Dispersión de las variables transformadas") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))  # Customize colors if needed
trans_plot
# Save the plot to a PDF file
ggsave("scatter_plot.pdf", plot = trans_plot, width = 8, height = 3)
library(MASS)
library(ggplot2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
mu = c(5/8, 5/8)
mu_1_ <- mu_1 - mu
mu_2_ <- mu_2 - mu
S_b <- fractions(3/4 * (mu_1_%*%t(mu_1_))) + fractions(1/4 * (mu_2_%*%t(mu_2_)))
S_b
S_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
S_b = matrix(c(-27/64,-9/64,-9/64,3/64),ncol = 2, nrow = 2)
S_aux<-solve(S_w)%*%S_b
fractions(S_aux)
A<-eigen(S_aux)$vectors
fractions(A)
t(A)%*%S_w%*%A
t(A)%*%S_b%*%A
Sx <- S_w+S_b
t(A)%*%Sx%*%A
# Load necessary libraries
library(ggplot2)
library(mvtnorm)
# Set your parameters (make sure you've defined mu_1, mu_2, and S_w)
mu_1 <- c(1, 2)  # Example mean vector for x_1
mu_2 <- c(3, 4)  # Example mean vector for x_2
S_w <- matrix(c(1, 0.5, 0.5, 2), nrow = 2)  # Example covariance matrix
# Generate random data
set.seed(3487)  # for reproducibility
n_1 <- rbinom(1, 500, 3/4)
n_2 <- 500 - n_1
x_1 <- mvrnorm(n_1, mu = mu_1, Sigma = S_w)
x_2 <- mvrnorm(n_2, mu = mu_2, Sigma = S_w)
# Combine the data into a data frame
data <- data.frame(
x = c(x_1[, 1], x_2[, 1]),
y = c(x_1[, 2], x_2[, 2]),
group = factor(rep(c("G=1", "G=2"), c(n_1, n_2)))
)
# Create the scatterplot using ggplot2
scatter_plot<-ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
labs(x = "X1", y = "X2", title = "Dispersión de las variables originales") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))  # Customize colors if needed
# Save the plot to a PDF file
ggsave("scatter_plot.pdf", plot = scatter_plot, width = 8, height = 3)
x_1_ <- sweep(x_1, 2, mu)
x_2_ <- sweep(x_2, 2, mu)
z_1 <- t(t(A)%*%t(x_1_))
z_2 <- t(t(A)%*%t(x_2_))
zz <- rbind(z_1, z_2)
data <- data.frame(
x = zz[,1],
y = zz[,2],
group = factor(rep(c("G=1", "G=2"), c(length(z_1), length(z_2))))
)
trans_plot<-ggplot(data, aes(x = x, y = y, color = group)) +
geom_point() +
labs(x = "x", y = "y", title = "Dispersión de las variables transformadas") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))  # Customize colors if needed
trans_plot
# Save the plot to a PDF file
ggsave("scatter_plot.pdf", plot = trans_plot, width = 8, height = 3)
plot(z_1, col = '#EE3496', pch=16)
points(z_2, col = '#004D40', pch=16)
A
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
C = sqrtm(S_w)
#compruebo:
t(C) %*% C
#calculo los autovalores y autovectores de B C^(-1) simga_b C que me define la
#magnitud F que quiero maximizar y adopta los valores maximos en sus autovectores:
B = t(solve(C)) %*% sigma_b %*% solve(C)
library(MASS)
library(ggplot2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
mu = c(5/8, 5/8)
mu_1_ <- mu_1 - mu
mu_2_ <- mu_2 - mu
S_b <- fractions(3/4 * (mu_1_%*%t(mu_1_))) + fractions(1/4 * (mu_2_%*%t(mu_2_)))
S_b
S_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
S_b = matrix(c(-27/64,-9/64,-9/64,3/64),ncol = 2, nrow = 2)
S_aux<-solve(S_w)%*%S_b
fractions(S_aux)
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
C = sqrtm(S_w)
#compruebo:
t(C) %*% C
#me da igual que sigma_w!
#calculo los autovalores y autovectores de B C^(-1) simga_b C que me define la
#magnitud F que quiero maximizar y adopta los valores maximos en sus autovectores:
B = t(solve(C)) %*% S_b %*% solve(C)
#calculo ave y ava:
b = eigen(B)
#a continuación defino la matriz A que esta compuesta por los alpha definidos
#como C^(-1)*beta_j con beta_j autovector de B:
A_aux = b$vectors
A = solve(C) %*% A_aux
A
fraction(A)
fractions(A)
#A<-eigen(S_aux)$vectors
#fractions(A)
t(A)%*%S_w%*%A
t(A)%*%S_b%*%A
Sx <- S_w+S_b
t(A)%*%Sx%*%A
#Ejercicio 9)
# Vamos a hacer las cuentas en R para comprobar las propiedades que sugiere
#el ejercicio teórico
install.packages('expm')
library(expm)
#Definimos las matrices, vectores y magnitudes del problema
sigma_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
pi_1 = 3/4
pi_2 = 1/4
mu_x = pi_1*mu_1 + pi_2*mu_2
sigma_b = pi_1*((mu_1 - mu_x) %*% t(mu_1 - mu_x)) + pi_2*((mu_2 - mu_x) %*% t(mu_2 - mu_x))
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
C = sqrtm(sigma_w)
install.packages("expm")
#Ejercicio 9)
# Vamos a hacer las cuentas en R para comprobar las propiedades que sugiere
#el ejercicio teórico
install.packages('expm')
library(expm)
#Definimos las matrices, vectores y magnitudes del problema
sigma_w = matrix(c(1,1/2,1/2,1),ncol = 2, nrow = 2)
mu_1 = c(1,1/2)
mu_2 = c(-1/2,1)
pi_1 = 3/4
pi_2 = 1/4
mu_x = pi_1*mu_1 + pi_2*mu_2
sigma_b = pi_1*((mu_1 - mu_x) %*% t(mu_1 - mu_x)) + pi_2*((mu_2 - mu_x) %*% t(mu_2 - mu_x))
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
C = sqrtm(sigma_w)
C
#definimos como la matriz C triangular tal que t(C) %*% C recupere sigma_w:
library(MASS)
fractions(C)
#compruebo:
t(C) %*% C
#me da igual que sigma_w!
#calculo los autovalores y autovectores de B C^(-1) simga_b C que me define la
#magnitud F que quiero maximizar y adopta los valores maximos en sus autovectores:
B = t(solve(C)) %*% sigma_b %*% solve(C)
B
b = eigen(B)
#a continuación defino la matriz A que esta compuesta por los alpha definidos
#como C^(-1)*beta_j con beta_j autovector de B:
A_aux = b$vectors
A = solve(C) %*% A_aux
A
fractions(A)
#calculo las cordenadas de los centroides según definicion:
#centroides
v_1 = t(A)%*%mu_1
v_2 = t(A)%*%mu_2
v_1
v_1
v_2
#distancia euclidea
norm(v_1 - v_2, "2")
#distancia mahalanobis
sqrt(t(mu_1-mu_2)%*%solve(sigma_w)%*%(mu_1 - mu_2))
mu_1
mu_1-mu_2
\solve(sigma_w)
solve(sigma_w)
fractions(solve(sigma_w))
t(A)%*%sigma_w%*%A
t(A)%*%(sigma_w+sigma_b)%*%A
t(A)%*%sigma_b%*%A
t(A)%*%sigma_w%*%A
t(A)%*%(sigma_w+sigma_b)%*%A
#realizo las simulaciones para probar la version estimada de lo hecho arriba:
## simulación:
library(MASS)
n_1 = rbinom(1,500,3/4)
n_2 = 500 - n_1
x_group_1 = mvrnorm(n_1, mu = mu_1, Sigma = sigma_w)
x_group_2 = mvrnorm(n_2, mu = mu_2, Sigma = sigma_w)
plot(x_group_1, col = 'red')
points(x_group_2, col = 'green')
x_1_cent = sweep(x_group_1,2,mu_x)
x_2_cent = sweep(x_group_2,2,mu_x)
z_1 =t( t(A)%*%t(x_1_cent)) #el quilombo de transpuestas es culpa de R
z_2 =t( t(A)%*%t(x_2_cent)) #el quilombo de transpuestas es culpa de R
plot(z_1, col = 'red')
points(z_2, col = 'green')
#se observa que la varianza esta "alineada" horizontalmente. Esto ocurre porque
#el segundo autovalor es 0, indicándonos que toda la varianza se explica a partir
#de la primer coordenada discriminante
zz <- data.frame(x=zz[,1], y=zz[,2], grupo=rep("G=1", "G=2", c(length(z1), length(z_2))))
data <- rbind(z_1, z_2)
zz <- data.frame(x=zz[,1], y=zz[,2], grupo=rep("G=1", "G=2", c(length(z_1), length(z_2))))
zz <- data.frame(x=data[,1], y=data[,2], grupo=rep("G=1", "G=2", c(length(z_1), length(z_2))))
data <- rbind(z_1, z_2)
zz <- data.frame(x=data[,1], y=data[,2], grupo=rep("G=1", "G=2", c(length(z_1), length(z_2))))
length(z_1)
zz <- data.frame(x=data[,1], y=data[,2], grupo=rep("G=1", "G=2", c(nrow(z_1), length(z_2))))
nrow(z_1)
zz <- data.frame(x=data[,1], y=data[,2], grupo=rep("G=1", "G=2", c(nrow(z_1), nrow(z_2))))
c(nrow(z_1), nrow(z_2))
zz <- data.frame(x=data[,1], y=data[,2], grupo=rep(c("G=1", "G=2"), c(nrow(z_1), nrow(z_2))))
scatter_plot<-ggplot(data, aes(x = x, y = y, color = grupo)) +
geom_point() +
labs(x = "z1", y = "z2", title = "Dispersión de las variables transformadas") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))
library(gglot2)
library(ggplot2)
scatter_plot<-ggplot(data, aes(x = x, y = y, color = grupo)) +
geom_point() +
labs(x = "z1", y = "z2", title = "Dispersión de las variables transformadas") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))
scatter_plot<-ggplot(zz, aes(x = x, y = y, color = grupo)) +
geom_point() +
labs(x = "z1", y = "z2", title = "Dispersión de las variables transformadas") +
scale_color_manual(values = c("G=1" = "#EE349c", "G=2" = "#07004D"))
scatter_plot
ggsave("scatter_plot_trans.pdf", plot = scatter_plot, width = 8, height = 3)
b$values
b
library('MASS')
library('expm')
n = 1000
Sigma <- matrix(c(3,1,1,1,3,1,1,1,5), ncol = 3)
mu <- matrix(c(0,0,0))
datos = mvrnorm(n = n, mu = mu, Sigma = Sigma)
datos <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
sigma_sqrt <- sqrtm(sigma)
sigma_sqrt <- sqrtm(Sigma)
z <- solve(sigma_1_2) %*% sweep(datos,2,mu))
z <- solve(sigma_1_2) %*% sweep(datos,2,mu)
z <- solve(sigma_sqrt) %*% sweep(datos,2,mu)
z <- sweep(datos,2,mu) %*% solve(sigma_sqrt)
pairs(datos)
pairs(datos_transform)
pairs(z)
pairs(datos)
pairs(z)
?pairs
pairs(datos)
pairs(z)
getwd
getwd()
# Ej 2.3 ####
setwd("/home/mailen/Documents/MEM/TVDR/")
# Ej 2.3 ####
setwd("/home/mailen/Documents/MEM/TVDR")
# Ej 2.3 ####
setwd("/home/mailen/Documents/MEM/TRVD/")
datos <- read.csv("Datos/constructora.txt")
View(datos)
datos <- read.csv("Datos/constructora.txt", sep=" ")
Sigma <- cov(datos)
X <- datos[2:4,2:4]
Sigma <- cov(X)
mu<- mean(X)
datos %>% mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(X3))
# Práctica 2
library('tidyverse')
# Práctica 2
library('tidyverse')
# Práctica 2
library('tidyverse')
datos %>% mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(X3))
# Ej 2.3 ####
library("dplyr")
datos %>% mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(X3))
datos %>% mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(x3))
datos_centrados <- datos %>%
mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(x3))
pairs(datos_centrados)
Sigma <- cov(datos_centrados[2:4])
Sigma
Sigma <- cov(as.matrix(datos_centrados[2:4]))
Sigma
## 2.3.A ####
# Centrar los datos
datos <- read.csv("Datos/constructora.txt", sep=" ")
datos_centrados <- datos %>%
mutate(x1=x1-mean(x1), x2=mean(x2), x3=mean(x3))
pairs(datos_centrados)
Sigma <- cov(as.matrix(datos_centrados[2:4]))
Sigma
View(datos_centrados)
datos_centrados <- datos %>%
mutate(x1=x1-mean(x1), x2=x2-mean(x2), x3=x3-mean(x3))
pairs(datos_centrados)
Sigma <- cov(as.matrix(datos_centrados[2:4]))
Sigma
eigen(Sigma)$vectors
U <- eigen(Sigma)$vectors
componentes <- datos_centrados[2:4] %*% A
componentes <- as.matrix(datos_centrados[2:4]) %*% A
as.matrix(datos_centrados[2:4])
A
Sigma <- cov(as.matrix(datos_centrados[,2:4]))
A <- eigen(Sigma)$vectors
componentes <- as.matrix(datos_centrados[2:4]) %*% A
## 2.3.C ####
componentes <- as_tibble(componentes)
View(componentes)
## 2.3.C ####
componentes <- as_tibble(componentes) %>%
rename(V1=p1,V2=p2, V3=p3)
## 2.3.C ####
componentes <- as_tibble(componentes) %>%
rename(p1=V1, p2=V2, p3=V3)
componentes %>% ggplot(aes(x=p1, y=p2))
library("ggplot")
library("ggplot2")
componentes %>% ggplot(aes(x=p1, y=p2))
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point("black")
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point(color="black")
componentes %>% ggplot(aes(x=p1, y=p3)) +
geom_point(color="black")
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point(color="black")
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point(color="black") +
theme_bw() + theme(aspect.ratio=1)
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point(color="black") +
theme(aspect.ratio=1)
pairs(datos_centrados)
pairs(componentes)
lambda <- eigen(Sigma)$values
lambda
S_comp <- cov(componentes)
S_comp
Sigma
A <- eigen(Sigma)$vectors[1:2]
lambda <- eigen(Sigma)$values
componentes <- as.matrix(datos_centrados[2:4]) %*% A
A <- eigen(Sigma)$vectors[,1:2]
lambda <- eigen(Sigma)$values
componentes <- as.matrix(datos_centrados[2:4]) %*% A
## 2.3.C ####
componentes <- as_tibble(componentes) %>%
rename(p1=V1, p2=V2, p3=V3)
## 2.3.C ####
componentes <- as_tibble(componentes) %>%
rename(p1=V1, p2=V2)
componentes %>% ggplot(aes(x=p1, y=p2)) +
geom_point(color="black") +
theme(aspect.ratio=1)
pairs(componentes)
S_comp <- cov(componentes)
S_comp
S_comp_3 <- cov(as.matrix(datos_centrados[2:4]) %*% eigen(Sigma)$vectors)
S_comp_3
a_cor <- eigen(cor(as.matrix(datos_centrados[,2:4])))
a
A <- eigen(Sigma)
A_cor <- eigen(cor(as.matrix(datos_centrados[,2:4])))
A
A_cor
datos4 <- read.csv("Datos/paises_mundo.csv")
pairs(datos4)
pairs(datos4)
datos4
pairs(datos4[2:5])
pairs(datos4[2:6])
## 2.4.2 ####
pca4 <- prcomp(as.matrix(datos4[2:6]), scale = F)
pca4
summary(pca4)
# Install from CRAN
install.packages("tidyverse")
