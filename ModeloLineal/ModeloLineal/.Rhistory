barplot(tapply(gain, list(diet, supplement), mean), col=cols, ylim=c(0,40), beside=T)
View(growth)
cols = c("red", "orange", "yellow")
labs = c("Cebada", "Avena", "Trigo")
barplot(tapply(growth, list(diet, supplement), mean), col=cols, ylim=c(0,40), beside=T)
growth <- read.csv("growth.txt", sep="\t")
cols = c("red", "orange", "yellow")
labs = c("Cebada", "Avena", "Trigo")
barplot(tapply(growth$gain, list(growth$diet, growth$supplement), mean), col=cols, ylim=c(0,40), beside=T)
legend(6.3,40, labs, fill=cols)
modelo <- lm(gain~diet*supplement, data=growth)
modelo
summary(model)
summary(modelo)
### C. ####
interaction.plot(growth$diet, growth$supplement, growth$gain)
interaction.plot(growth$supplement, growth$diet,growth$gain)
model_ad <- lm(gain~diet+supplement, data=growth)
anova(model_ad, modelo)
model_nosupp <-lm(gain~diet, data=growth)
anova(model_ad, model_nosupp)
summary(model_ad)
new_data <- data.frame(diet="oats", supplement ="supersupp")
predict(model_ad, new_data)
new_data_1 <- data.frame(diet="oats", supplement ="supersupp")
predict(model_ad, new_data_1)
new_data_1 <- data.frame(diet="oats", supplement ="supersupp")
new_data_2 <- data.frame(diet="barley", supplement ="agrimore")
predict(model_ad, new_data_1)
predict(model_ad, new_data_2)
data <- data("stackloss")
data <- data(stackloss)
data <- stackloss
View(data)
pairs (data)
## B ####
model <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc, data=data)
## B ####
model <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc., data=data)
## C ####
summary(model)
## D ####
model <- lm(stack.loss~Air.Flow+Water.Temp, data=data)
## B ####
model <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc., data=data)
## C ####
summary(model)
## D ####
model2 <- lm(stack.loss~Air.Flow+Water.Temp, data=data)
summary(model2)
confint(model, level = .9)
betas <- matrix(model$coefficients)
X <- model.matrix(model)
n <- nrow(model.matrix(model))
p <- ncol(model.matrix(model))
a <- matrix(c(1, 0, 0, 0))
t(a) %*%  betas # Valor predicho
t(a) %*%  betas + qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model_stackloss)  * sqrt(t(a) %*% Matrix::solve(t(X)%*%X) %*% a)
alpha <- 0.9
t(a) %*%  betas + qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% Matrix::solve(t(X)%*%X) %*% a)
t(a) %*%  betas - qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% solve(t(X)%*%X) %*% a)
# A mano
confint(model, level = alpha)
alpha <- 1-0.9
betas <- matrix(model$coefficients)
X <- model.matrix(model)
n <- nrow(model.matrix(model))
p <- ncol(model.matrix(model))
a <- matrix(c(1, 0, 0, 0))
t(a) %*%  betas # Valor predicho
t(a) %*%  betas + qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% Matrix::solve(t(X)%*%X) %*% a)
t(a) %*%  betas - qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% solve(t(X)%*%X) %*% a)
alpha <- 1-0.9
betas <- matrix(model$coefficients)
X <- model.matrix(model)
n <- nrow(model.matrix(model))
p <- ncol(model.matrix(model))
a <- matrix(c(1, 58, 20, 86))
t(a) %*%  betas # Valor predicho
t(a) %*%  betas + qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% Matrix::solve(t(X)%*%X) %*% a)
t(a) %*%  betas - qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% solve(t(X)%*%X) %*% a)
alpha <- 1-0.95
betas <- matrix(model$coefficients)
X <- model.matrix(model)
n <- nrow(model.matrix(model))
p <- ncol(model.matrix(model))
a <- matrix(c(1, 58, 20, 86))
t(a) %*%  betas # Valor predicho
t(a) %*%  betas + qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% Matrix::solve(t(X)%*%X) %*% a)
t(a) %*%  betas - qt(p = alpha/2, df = n-p, lower.tail = F) *  sigma(model)  * sqrt(t(a) %*% solve(t(X)%*%X) %*% a)
data_ellipse <- as.tibble(ellipse(model_stackloss, which=c(2,3), level=.90),)
library(dplyr)
# Usando la librería ellipse
data_ellipse <- as.tibble(ellipse(model_stackloss, which=c(2,3), level=.90),)
data_ellipse <- as.tibble(ellipse(model_stackloss, which=c(2,3), level=.90),)
install.packages("tibble")
install.packages("tibble")
data_ellipse <- as.tibble(ellipse(model, which=c(2,3), level=.90),)
library(tibble)
data_ellipse <- as.tibble(ellipse(model, which=c(2,3), level=.90),)
library(ellipse)
install.packages("ellipse")
install.packages("ellipse")
library(ellipse)
data_ellipse <- as.tibble(ellipse(model, which=c(2,3), level=.90),)
library(AER)
library(dplyr)
library(ellipse)
library(tibble)
data_ellipse <- as.tibble(ellipse(model, which=c(2,3), level=.90),)
# Usando la librería ellipse
data_ellipse <- as_tibble(ellipse(model, which=c(2,3), level=.90),)
library(ellipse)
# Usando la librería ellipse
data_ellipse <- as_tibble(ellipse(model, which=c(2,3), level=.90),)
model
# Usando la librería ellipse
data_ellipse <- as_tibble(ellipse(model, which=c(2,3), level=.90),)
model
## I ####
library(car)
data_ellipse <- as_tibble(ellipse(model, which=c(2,3), level=.90),)
# Usando la librería ellipse
data_ellipse <- as_tibble(ellipse(model, which=cov(model), level=.90),)
?wine
??wine
# Parcial ML
data <- read.csv("wine.csv", header = T)
# Parcial ML
data <- read.csv("wine.csv", header = T)
View(data)
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
mod1 <- lm(Price~AGST)
mod1 <- lm(Price~AGST)
# Parcial ML
data <- read.csv("wine.csv", header = T)
mod1 <- lm(Price~AGST, data=data)
summary(mod1)
0.6426/0.1434
qt(0.025, 25)
qt(1-0.025, 25)
mod1
data$WinterRain >= 600
data
mutate(hum = WinterRain >= 600)
data %>%
mutate(hum = WinterRain >= 600)
# Parcial ML
library(dplyr)
data %>%
mutate(hum = WinterRain >= 600)
library(dplyr)
data <- read.csv("wine.csv", header = T)
## Ejercicio 1. ####
## 1.1 ####
mod1 <- lm(Price~AGST, data=data)
mod1
## 1.2 ####
summary(mod1)
## 1.3 ####
# El coeficiente de AGST es positivo por lo cual la recta es creciente
## 1.4 ####
data %>%
mutate(Hum = WinterRain >= 600)
View(data)
data<- data %>%
mutate(Hum = WinterRain >= 600)
View(data)
mod2 <- lm(Price~AGST+Hum)
mod2 <- lm(Price~AGST+Hum, data = data)
summary(mod2)
data <- data %>%
mutate(Hum = as.numeric(WinterRain >= 600))
mod2 <- lm(Price~AGST+Hum, data = data)
summary(mod2)
data <- data %>%
mutate(Hum = as.factor(WinterRain >= 600))
mod2 <- lm(Price~AGST+Hum, data = data)
summary(mod2)
data <- data %>%
mutate(Hum = as.numeric(WinterRain >= 600))
mod2 <- lm(Price~AGST+Hum, data = data)
summary(mod2)
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
scatter<-ggplot(data = data, aes(x = Year, y = Age)) +
geom_point() +
labs(title = "Year vs. Age",
x = "Year",
y = "Age")
library(ggplot2)
scatter<-ggplot(data = data, aes(x = Year, y = Age)) +
geom_point() +
labs(title = "Year vs. Age",
x = "Year",
y = "Age")
scatter
mod3 <- lm(Price~AGST*Hum, data=data)
summary(mod3)
mod4 <- lm(Price~AGST+Hum+WinterRain+HarvestRain+Age+FrancePop)
summary(mod4)
mod4 <- lm(Price~AGST+Hum+WinterRain+HarvestRain+Age+FrancePop, data=data)
summary(mod4)
## 1.11 ####
mod5 <- lm(Price~AGST+Hum+WinterRain+HarvestRain+Age, data=data)
summary(mod5)
## 1.12 ####
A <- matrix(c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3)
A
## 1.12 ####
A <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), nrow = 2)
## 1.12 ####
A <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 1), nrow = 2)
A
# La matriz del modelo
X <- model.matrix(mod4)
X
betas <- mod4$coefficients
# Calculo el F
F_val <- t(A %*% betas) %*% inv(A %*% inv(t(X) %*% X) %*% t(A)) %*% (A %*% betas) / (nrow(A)*summary(mod4)$sigma^2)
# Calculo el F
F_val <- t(A %*% betas) %*% inv(A %*% solve(t(X) %*% X) %*% t(A)) %*% (A %*% betas) / (nrow(A)*summary(mod4)$sigma^2)
# Calculo el F
F_val <- t(A %*% betas) %*% solve(A %*% solve(t(X) %*% X) %*% t(A)) %*% (A %*% betas) / (nrow(A)*summary(mod4)$sigma^2)
# Y ahora el p-value
pf(df1 = nrow(A), df2 = nrow(X)-ncol(X), q = as.numeric(F_val), lower.tail = FALSE)
?rnorm
y <- b0 + b1*x1 + b2*x2 +  + b12*x1*x2 + err
b0 = 2
b1 = -3
b2 = 2
b12 = 10
n=60
mu_x = 10
var_x = 25
set.seed(3487)
err <- rnorm(n)
x1 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
x2 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
y <- b0 + b1*x1 + b2*x2 +  + b12*x1*x2 + err
### 2.1.a ####
model <- lm(y~x1*x2)
summary(model)
beta1 <- model$coefficients[1]
beta1 <- model$coefficients[2]
### 2.1.b ####
CI <- confint(model, level = .9)
CI
CI_beta1 <- CI[2]
CI_beta1
CI_beta1 <- CI$x1
CI_beta1 <- CI[,2]
CI_beta1 <- CI[2,]
### 2.1.c ####
between(b1, CI[2,1], CI[2, 2])
### 2.1.d ####
modelo_wo_int <- lm(y~x1+x2)
alpha1 <- modelo_wo_int$coefficients[2]
CI_wo_int <- confint(model_wo_int, level = .9)
CI_alpha1 <- CI_wo_int[2,]
CI_wo_int <- confint(model_wo_int, level = .9)
CI_alpha1 <- CI_wo_int[2,]
### 2.1.d ####
modelo_wo_int <- lm(y~x1+x2)
alpha1 <- modelo_wo_int$coefficients[2]
CI_wo_int <- confint(model_wo_int, level = .9)
CI_alpha1 <- CI_wo_int[2,]
CI_wo_int <- confint(modelo_wo_int, level = .9)
CI_alpha1 <- CI_wo_int[2,]
### 2.1.f ####
between(b1, CI_wo_int[2,1], CI_wo_int[2, 2])
between(b1, CI_wo_int[2,1], CI_wo_int[2, 2])
# El valor no está en el intervalo de confianza
## 2.2 ####
Nrep = 1000
## Para A: guardar b1
betas_1 = rep(NA, Nrep)
## Para B
cubrimiento_b1 = rep(NA, Nrep)
## Para C
alphas_1 = rep(NA, Nrep)
## Para D
cubrimiento_a1 = rep(NA, Nrep)
set.seed(3487)
for (i in 1:Nrep){
# Calculo modelo
err <- rnorm(n)
y <- b0 + b1*x1 + b2*x2 + b12*x1*x1 + err
model_betas <- lm(y~x1*x2)
model_alphas <- lm(y~x1+x2)
# Para A
betas_1[i]<-model_betas$coefficients[2]
# Para C
alphas_1[i]<-model_alphas$coefficients[2]
# Para B
CI_beta <- confint(model_betas, level = .9)
cubrimiento_b1[i] <- between(b1, CI_beta[2,1], CI_beta[2, 2])
# Para D
CI_alpha <- confint(model_alphas, level = .9)
cubrimiento_a1[i] <- between(b1, CI_alpha[2,1], CI_alpha[2, 2])
}
boxplot(betas_1)
model_betas
b0 = 2
b1 = -3
b2 = 2
b12 = 10
n=60
mu_x = 10
var_x = 25
set.seed(3487)
err <- rnorm(n)
x1 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
x2 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
## 2.2 ####
Nrep = 1000
## Para A: guardar b1
betas_1 = rep(NA, Nrep)
## Para B
cubrimiento_b1 = rep(NA, Nrep)
## Para C
alphas_1 = rep(NA, Nrep)
## Para D
cubrimiento_a1 = rep(NA, Nrep)
set.seed(3487)
for (i in 1:Nrep){
# Calculo modelo
err <- rnorm(n)
y <- b0 + b1*x1 + b2*x2 + b12*x1*x1 + err
model_betas <- lm(y~x1*x2)
model_alphas <- lm(y~x1+x2)
# Para A
betas_1[i]<-model_betas$coefficients[2]
# Para C
alphas_1[i]<-model_alphas$coefficients[2]
# Para B
CI_beta <- confint(model_betas, level = .9)
cubrimiento_b1[i] <- between(b1, CI_beta[2,1], CI_beta[2, 2])
# Para D
CI_alpha <- confint(model_alphas, level = .9)
cubrimiento_a1[i] <- between(b1, CI_alpha[2,1], CI_alpha[2, 2])
}
### 2.2.a ####
boxplot(betas_1)
model_betas
summary(model_betas)
## 2.2 ####
Nrep = 1000
## Para A: guardar b1
betas_1 = rep(NA, Nrep)
## Para B
cubrimiento_b1 = rep(NA, Nrep)
## Para C
alphas_1 = rep(NA, Nrep)
## Para D
cubrimiento_a1 = rep(NA, Nrep)
set.seed(3487)
x1 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
x2 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
for (i in 1:Nrep){
# Calculo modelo
err <- rnorm(n)
y <- b0 + b1*x1 + b2*x2 + b12*x1*x1 + err
model_betas <- lm(y~x1*x2)
model_alphas <- lm(y~x1+x2)
# Para A
betas_1[i]<-model_betas$coefficients[2]
# Para C
alphas_1[i]<-model_alphas$coefficients[2]
# Para B
CI_beta <- confint(model_betas, level = .9)
cubrimiento_b1[i] <- between(b1, CI_beta[2,1], CI_beta[2, 2])
# Para D
CI_alpha <- confint(model_alphas, level = .9)
cubrimiento_a1[i] <- between(b1, CI_alpha[2,1], CI_alpha[2, 2])
}
### 2.2.a ####
boxplot(betas_1)
## 2.2 ####
Nrep = 1000
## Para A: guardar b1
betas_1 = rep(NA, Nrep)
## Para B
cubrimiento_b1 = rep(NA, Nrep)
## Para C
alphas_1 = rep(NA, Nrep)
## Para D
cubrimiento_a1 = rep(NA, Nrep)
set.seed(3487)
x1 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
x2 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
for (i in 1:Nrep){
# Calculo modelo
err <- rnorm(n)
y <- b0 + b1*x1 + b2*x2 + b12*x1*x2 + err
model_betas <- lm(y~x1*x2)
model_alphas <- lm(y~x1+x2)
# Para A
betas_1[i]<-model_betas$coefficients[2]
# Para C
alphas_1[i]<-model_alphas$coefficients[2]
# Para B
CI_beta <- confint(model_betas, level = .9)
cubrimiento_b1[i] <- between(b1, CI_beta[2,1], CI_beta[2, 2])
# Para D
CI_alpha <- confint(model_alphas, level = .9)
cubrimiento_a1[i] <- between(b1, CI_alpha[2,1], CI_alpha[2, 2])
}
### 2.2.a ####
boxplot(betas_1)
mean(betas_1) - b1
cubrimiento_b1
sum(cubrimiento_b1)
mean(cubrimiento_b1)
### 2.2.c ####
sum(cubrimiento_a1)
mean(cubrimiento_a1)
### 2.2.c ####
sum(cubrimiento_a1)
mean(cubrimiento_a1)
sd(betas_1)
sd(alphas_1)
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
# Ejercicio 1. ####
## 1.1 ####
mod1 <- lm(Price~AGST, data=data)
mod1
mod2 <- lm(Price~AGST+Hum, data = data)
data <- data %>%
mutate(Hum = as.numeric(WinterRain >= 600))
mod2 <- lm(Price~AGST+Hum, data = data)
## 1.6 ####
summary(mod2)
data$Hum
-5.3933+0.4425
anova(mod1, mod2)
?anova
## 1.6 ####
summary(mod2)
cor(data$Year, data$Age)
(mod3)
## 1.9 ####
summary(mod3)
mod4 <- lm(Price~AGST+Hum+WinterRain+HarvestRain+Age+FrancePop, data=data)
summary(mod4)
## 1.11 ####
mod5 <- lm(Price~AGST+Hum+WinterRain+HarvestRain+Age, data=data)
summary(mod5)
cor(data$Age, data$FrancePop)
## 1.12 ####
pairs(data)
## 1.13 ####
# Planteo test simultaneo para dos condiciones sobre los betas
# La matriz de condiciones es tal que tengo unos en el lugar de beta2: Hum y de
# beta6 FrancePop
A <- matrix(c(0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 1), nrow = 2)
A
C <- matrix(c(0, 0), nrow = 2)
C
# La matriz del modelo
X <- model.matrix(mod4)
X
betas <- mod4$coefficients
# Calculo el F
F_val <- t(A %*% betas) %*% solve(A %*% solve(t(X) %*% X) %*% t(A)) %*% (A %*% betas) / (nrow(A)*summary(mod4)$sigma^2)
# Y ahora el p-value
pf(df1 = nrow(A), df2 = nrow(X)-ncol(X), q = as.numeric(F_val), lower.tail = FALSE)
F_val
qf(df1 = nrow(A), df2 = nrow(X)-ncol(X))
qf(df1 = nrow(A), df2 = nrow(X)-ncol(X))
?qf
qf(1-0.025,df1 = nrow(A), df2 = nrow(X)-ncol(X))
qf(1-0.05,df1 = nrow(A), df2 = nrow(X)-ncol(X))
nrow(A)
df1 = nrow(A), df2 = nrow(X)-ncol(X)
nrow(X)-ncol(X)
b0 = 2
b1 = -3
b2 = 2
b12 = 10
n=60
mu_x = 10
var_x = 25
set.seed(3487)
err <- rnorm(n)
x1 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
x2 <- round(rnorm(n, mu_x, sqrt(var_x)), 2)
y <- b0 + b1*x1 + b2*x2 +  + b12*x1*x2 + err
### 2.1.a ####
model <- lm(y~x1*x2)
summary(model)
beta1 <- model$coefficients[2]
beta1
CI <- confint(model, level = .9)
CI_beta1 <- CI[2,]
CI_beta1
### 2.1.c ####
between(b1, CI[2,1], CI[2, 2])
modelo_wo_int <- lm(y~x1+x2)
alpha1 <- modelo_wo_int$coefficients[2]
alpha1
CI_wo_int <- confint(modelo_wo_int, level = .9)
CI_alpha1 <- CI_wo_int[2,]
### 2.1.f ####
# Me fijo si el valor real de b1 está en el nuevo intervalo de confianza
between(b1, CI_wo_int[2,1], CI_wo_int[2, 2])
boxplot(betas_1)
sd(betas_1)
sd(alphas_1)
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
source("~/Documents/MEM/ModeloLineal/ModeloLineal/Parcial.R")
